{"version":3,"file":"process-markdown.js","sourceRoot":"./","sources":["lib/process-markdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, {ReactNode} from \"react\";\nimport marked, { Token, TokensList } from \"marked\";\nimport DEFAULT_ELEMENT_HANDLERS from \"../handlers\";\nimport { FixedToken, DefaultParserContext , SectionsSetter, NotesSetter, SectionTagSetter, SectionClassSetter } from \"../types\";\nimport walkTokens from \"./walk-tokens\";\n\nexport const tokenWalker = (context: DefaultParserContext) => (unknownToken: FixedToken, parent?: FixedToken): boolean | undefined => {\n\tconst token: FixedToken = (unknownToken as unknown) as FixedToken;\n\tconst handlerDefinition = DEFAULT_ELEMENT_HANDLERS[token.type];\n\tlet extraTags: string = \"\";\n\tlet extraClasses: string = \"\";\n\n\tif (handlerDefinition) {\n\t\tconst handlerResult = handlerDefinition(token, context, marked.parser);\n\t\tconst index: 0 | 1 = token.type === \"heading\" ? 0 : 1;\n\n\t\tif (handlerResult) {\n\t\t\tif (Array.isArray(handlerResult)) {\n\t\t\t\tlet handler: ReactNode | Array<ReactNode>;\n\n\t\t\t\tif (handlerResult.length === 2 && (typeof(handlerResult[1]) === \"string\" || Array.isArray(handlerResult[1]))) {\n\t\t\t\t\tif (typeof(handlerResult[1]) === \"string\") {\n\t\t\t\t\t\textraTags = handlerResult[1];\n\t\t\t\t\t} else if (typeof(handlerResult[1][0]) === \"string\") {\n\t\t\t\t\t\textraTags = handlerResult[1][0];\n\t\t\t\t\t\textraClasses = handlerResult[1].slice(1).join(\" \");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Array.isArray(handlerResult[0])) {\n\t\t\t\t\t\thandler = handlerResult[0];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcontext.currSection[1].push(handlerResult[0]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thandler = handlerResult as ReactNode;\n\t\t\t\t}\n\n\t\t\t\t// Technically this is an array already\n\t\t\t\tif (Array.isArray(handler)) {\n\t\t\t\t\tif (context.currSection && context.currSection[0].length || context.currSection[1].length) {\n\t\t\t\t\t\tcontext.newSections.push(context.currSection);\n\t\t\t\t\t\tcontext.sectionTags.push([]);\n\t\t\t\t\t\tcontext.sectionClasses.push([]);\n\t\t\t\t\t}\n\n\t\t\t\t\tcontext.currSection = [[], []];\n\t\t\t\t\tcontext.currSection[index] = handler;\n\t\t\t\t}\n\t\t\t} else if (handlerResult === true) {\n\t\t\t\tlet html = marked.parser(([token] as any) as TokensList);\n\n\t\t\t\thtml = html.replace(/<td>/g, \"<td tabIndex='1'>\");\n\n\t\t\t\tcontext.currSection[index].push(() => (\n\t\t\t\t\t<div className=\"basic-slide-part\"\n\t\t\t\t\t\tkey={`${context.currSection.length}:${token.type}`}\n\t\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t\t__html: html,\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t));\n\t\t\t} else {\n\t\t\t\tcontext.currSection[index].push(handlerResult);\n\t\t\t}\n\n\t\t\tswitch(token.type) {\n\t\t\t\tcase \"heading\":\n\t\t\t\t\tcontext.sectionTags[context.sectionTags.length - 1].push(`h${token.depth}`);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcontext.sectionTags[context.sectionTags.length - 1].push(token.type);\n\t\t\t}\n\n\t\t\tif (extraTags) {\n\t\t\t\tcontext.sectionTags[context.sectionTags.length - 1].push(extraTags);\n\t\t\t}\n\n\t\t\tif (extraClasses) {\n\t\t\t\tcontext.sectionClasses[context.sectionClasses.length - 1].push(extraClasses);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn token.type === \"list\";\n}\n\nconst processMarkdown = (path: string, setSections: SectionsSetter, setNotes: NotesSetter, setSectionTags: SectionTagSetter, setSectionClasses: SectionClassSetter) => {\n\tfetch(path)\n\t\t.then((response) => response.text())\n\t\t.then((md) => {\n\t\t\tconst context: DefaultParserContext = {\n\t\t\t\theadingIndex: 0,\n\t\t\t\tnewSections: [],\n\t\t\t\tcurrSection: [[], []],\n\t\t\t\tnotes: [],\n\t\t\t\tsectionTags: [[]],\n\t\t\t\tsectionClasses: [[]]\n\t\t\t};\n\n\t\t\tconst tokens = marked.Lexer.lex((md as any) as TokensList);\n\n\t\t\twalkTokens(tokens, tokenWalker(context));\n\n\t\t\t// Add in last section\n\t\t\tif (context.currSection.length) {\n\t\t\t\tcontext.newSections.push(context.currSection);\n\t\t\t}\n\n\t\t\tsetSections(context.newSections);\n\t\t\tsetNotes(context.notes);\n\t\t\tsetSectionTags(context.sectionTags);\n\t\t\tsetSectionClasses(context.sectionClasses);\n\t\t});\n}\n\nexport default processMarkdown;\n"]}