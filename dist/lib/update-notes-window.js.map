{"version":3,"file":"update-notes-window.js","sourceRoot":"./","sources":["lib/update-notes-window.ts"],"names":[],"mappings":"AAEA,MAAM,QAAQ,GAAG,CAAC,IAAY,EAAU,EAAE;IACzC,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;IACjD,IAAI,OAAO,GAAW,WAAW,GAAG,EAAE,CAAC;IACvC,IAAI,OAAO,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;IAExE,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QACvB,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;KACxB;IAED,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QACvB,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;KACxB;IAED,OAAO,GAAG,OAAO,IAAI,OAAO,EAAE,CAAC;AAChC,CAAC,CAAA;AAED,MAAM,iBAAiB,GAAG,CAAC,cAAsB,EAAE,WAAmB,EAAE,WAA2B,EAAE,KAAa,EAAE,YAAqB,EAAE,EAAE;IAC5I,IAAI,WAAW,EAAE;QAChB,MAAM,MAAM,GAAG;YACd,UAAU;YACV,cAAc,cAAc,GAAG,CAAC,IAAI,WAAW,QAAQ;YACvD,YAAY,CAAC,CAAC,CAAC,QAAQ,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;YAC1D,WAAW;SACX,CAAC;QAEF,MAAM,IAAI,GAAG;YACZ,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;SACf,CAAC;QAEF,IACC,KAAK;YACL,KAAK,CAAC,cAAc,CAAC;YACrB,KAAK,CAAC,cAAc,CAAC,CAAC,MAAM,EAC3B;YACD,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;SAC9F;QAED,IAAK,WAAmB,CAAC,WAAW,EAAE;YACrC,YAAY,CAAE,WAAmB,CAAC,WAAW,CAAC,CAAC;SAC/C;QAEA,WAAmB,CAAC,WAAW,GAAG,UAAU,CAC5C,GAAG,EAAE;YACJ,iBAAiB,CAAC,cAAc,EAAE,WAAW,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,YAAY,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAA;QAC/F,CAAC,EACD,IAAI,CACJ,CAAC;QAEF,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACpD;AACF,CAAC,CAAA;AAED,eAAe,iBAAiB,CAAC","sourcesContent":["import { Notes } from \"../types\";\n\nconst makeTime = (time: number): string => {\n\tconst minuteValue = Math.floor(time / 1000 / 60);\n\tlet minutes: string = minuteValue + \"\";\n\tlet seconds: string = Math.floor(time / 1000) - (minuteValue * 60) + \"\";\n\n\tif (minutes.length < 2) {\n\t\tminutes = `0${minutes}`;\n\t}\n\n\tif (seconds.length < 2) {\n\t\tseconds = `0${seconds}`;\n\t}\n\n\treturn `${minutes}:${seconds}`;\n}\n\nconst updateNotesWindow = (currentSection: number, numSections: number, notesWindow?: Window | null, notes?: Notes, ellapsedTime?: number) => {\n\tif (notesWindow) {\n\t\tconst header = [\n\t\t\t\"<header>\",\n\t\t\t`<div>Slide ${currentSection + 1}/${numSections}</div>`,\n\t\t\tellapsedTime ? `<div>${makeTime(ellapsedTime)}</div>` : \"\",\n\t\t\t\"</header>\",\n\t\t];\n\n\t\tconst html = [\n\t\t\theader.join(\"\")\n\t\t];\n\n\t\tif (\n\t\t\tnotes &&\n\t\t\tnotes[currentSection] &&\n\t\t\tnotes[currentSection].length\n\t\t) {\n\t\t\thtml.push(`<div>${notes[currentSection].join(\"</div><div>\").replace(/\\n/g, \"<br />\")}</div>`);\n\t\t}\n\n\t\tif ((notesWindow as any).timerHandle) {\n\t\t\tclearTimeout((notesWindow as any).timerHandle);\n\t\t}\n\n\t\t(notesWindow as any).timerHandle = setTimeout(\n\t\t\t() => {\n\t\t\t\tupdateNotesWindow(currentSection, numSections, notesWindow, notes, (ellapsedTime || 0) + 1000)\n\t\t\t},\n\t\t\t1000\n\t\t);\n\n\t\tnotesWindow.document.body.innerHTML = html.join(\"\");\n\t}\n}\n\nexport default updateNotesWindow;\n"]}