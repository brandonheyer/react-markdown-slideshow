{"version":3,"file":"loader.js","sourceRoot":"./","sources":["loader.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAM,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEhE,OAAO,oBAAoB,MAAM,yBAAyB,CAAC;AAG3D,OAAO,eAAe,MAAM,wBAAwB,CAAC;AACrD,OAAO,cAAc,MAAM,uBAAuB,CAAC;AACnD,OAAO,eAAe,MAAM,yBAAyB,CAAC;AAOtD,MAAM,MAAM,GAAoB,CAAC,EAAE,IAAI,EAAE,mBAAmB,GAAG,EAAE,EAAE,EAAE,EAAE;IACrE,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAW,EAAE,CAAC,CAAC;IACxD,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,CAAc,EAAE,CAAC,CAAC;IAChE,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,QAAQ,CAAkB,EAAE,CAAC,CAAC;IACzE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAQ,EAAE,CAAC,CAAC;IAC9C,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,CAAc,IAAI,CAAC,CAAC;IAEnE,4BAA4B;IAC5B,MAAM,OAAO,GAAwB,OAAO,CAC3C,GAAG,EAAE,CAAC,cAAc,CAAC,mBAAmB,CAAC,EACzC,CAAC,mBAAmB,CAAC,CACrB,CAAC;IAEF,MAAM,SAAS,GAAG,CAAC,OAAM,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC;IAEpH,8BAA8B;IAC7B,SAAS,CAAC,GAAG,EAAE;QACf,eAAe,CAAC,SAAS,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;IACxD,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAEjB,0CAA0C;IACzC,SAAS,CAAC,GAAG,EAAE;QACf,eAAe,CAAC,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,cAAc,EAAE,iBAAiB,CAAC,CAAC;IAChF,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEX,OAAO,CACL,oBAAC,oBAAoB,IACnB,QAAQ,EAAE,QAAQ,EAClB,KAAK,EAAE,KAAK,EACZ,WAAW,EAAE,WAAW,EACxB,eAAe,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAC5E,WAAW,EAAE,WAAW,EACxB,cAAc,EAAE,cAAc,GAC3B,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import React, { FC, useState, useEffect, useMemo } from \"react\";\n\nimport MarkdownPresentation from \"./markdown-presentation\";\nimport { SectionTags, SectionClasses, Sections, Notes, PresentationOptions, ConfigurablePresentationOptions } from \"./types\";\n\nimport processMarkdown from \"./lib/process-markdown\";\nimport combineOptions from \"./lib/combine-options\";\nimport initNotesWindow from \"./lib/init-notes-window\";\n\ninterface LoaderProps {\n  path: string;\n\tpresentationOptions?: ConfigurablePresentationOptions;\n}\n\nconst Loader: FC<LoaderProps> = ({ path, presentationOptions = {} }) => {\n  const [sections, setSections] = useState<Sections>([]);\n\tconst [sectionTags, setSectionTags] = useState<SectionTags>([]);\n\tconst [sectionClasses, setSectionClasses] = useState<SectionClasses >([]);\n  const [notes, setNotes] = useState<Notes>([]);\n  const [notesWindow, setNotesWindow] = useState<Window|null>(null);\n\n\t// Get options with defaults\n\tconst options: PresentationOptions = useMemo(\n\t\t() => combineOptions(presentationOptions),\n\t\t[presentationOptions]\n\t);\n\n\tconst showNotes = (typeof(options.notesOptions) === \"object\") ? options.notesOptions.enabled : options.notesOptions;\n\n\t// Initialize the notes window\n  useEffect(() => {\n\t\tinitNotesWindow(showNotes, notesWindow, setNotesWindow);\n\t }, [showNotes]);\n\n\t// Process the provided markdown at `path`\n  useEffect(() => {\n\t\tprocessMarkdown(path, setSections, setNotes, setSectionTags, setSectionClasses);\n  }, [path]);\n\n  return (\n    <MarkdownPresentation\n      sections={sections}\n      notes={notes}\n      notesWindow={notesWindow}\n      startingSection={parseInt(window.location.hash.replace(\"#\", \"\"), 10) || 0}\n\t\t\tsectionTags={sectionTags}\n\t\t\tsectionClasses={sectionClasses}\n    />\n  );\n};\n\nexport default Loader;\n"]}