{"version":3,"file":"types.js","sourceRoot":"./","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["import { ReactNode, Dispatch, SetStateAction } from \"react\";\nimport { Token, Tokens, TokensList, MarkedOptions } from \"marked\";\n\n/**\n * Adjustments to @types/marked\n */\n\n/**\n *  `Tokens.Heading` is missing `tokens` array\n */\nexport type FixedHeading = Tokens.Heading & {\n  tokens: Array<FixedToken>;\n};\n\nexport type FixedListItem = Tokens.Heading & {\n\ttokens: Array<FixedToken>;\n}\n\n/**\n * `Tokens.List` has `type` set to \"list_start\", should be \"list\"\n */\nexport type FixedList = Omit<Tokens.List, \"type\" | \"items\"> & {\n  type: \"list\";\n\titems: Array<FixedListItem>;\n};\n\n/**\n * The unioned members of `Token` are inconsistently implemented and sometimes\n * do not have the `type` property. Also:\n *  - replace `Tokens.List` with `FixedList`\n *  - replace `Tokens.Heading` with `FixedHeading` (for consistency)\n */\nexport type FixedToken =\n  | Exclude<Token, Tokens.Def | Tokens.Heading | Tokens.List | Tokens.ListItem>\n  | FixedHeading\n  | FixedList\n\t| FixedListItem\n  | Tokens.Link;\n\n/**\n * Alias for all `Tokens` that have a `text` property\n */\nexport type TextToken = Exclude<\n  FixedToken,\n  | Tokens.Space\n  | Tokens.Table\n  | Tokens.Hr\n  | Tokens.BlockquoteStart\n  | Tokens.BlockquoteEnd\n  | Tokens.Br\n  | Tokens.Del\n  | FixedList\n>;\n\n\n/**\n * Other Types\n */\n\nexport type SectionElements = Array<ReactNode>;\nexport type SectionEntry = [SectionElements, SectionElements];\nexport type Sections = Array<SectionEntry>;\nexport type SectionTags = Array<Array<string>>;\nexport type SectionClasses = Array<Array<string>>;\nexport type Notes = Array<Array<string>>;\n\nexport type WindowSetter = Dispatch<SetStateAction<Window | null>>;\nexport type SectionTagSetter = Dispatch<SetStateAction<SectionTags>>;\nexport type SectionClassSetter = Dispatch<SetStateAction<SectionClasses>>;\nexport type NotesSetter = Dispatch<SetStateAction<Notes>>;\nexport type SectionsSetter = Dispatch<SetStateAction<Sections>>;\n\ninterface ParserContext {\n\t[key: string]: any;\n}\n\nexport interface DefaultParserContext extends ParserContext {\n\theadingIndex: number;\n\tcurrSection: SectionEntry;\n\tnewSections: Sections;\n\tsectionTags: SectionTags;\n\tsectionClasses: SectionClasses;\n\tnotes: Array<Array<string>>;\n}\n\nexport type ElementHandler<T extends ParserContext> = (\n  token: FixedToken,\n  context: T,\n\tparser: (src: TokensList, options?: MarkedOptions) => string\n) => [ReactNode, string | Array<string>] | ReactNode;\n\nexport type DefaultElementHandler = ElementHandler<DefaultParserContext>;\n\n export type ElementHandlersDefinition<T extends ParserContext> = Partial<\n   Record<\n     | \"blockquote\"\n     | \"blockquote_start\"\n     | \"blockquote_end\"\n     | \"br\"\n     | \"code\"\n     | \"codespan\"\n     | \"del\"\n     | \"escape\"\n     | \"em\"\n     | \"heading\"\n     | \"hr\"\n     | \"html\"\n     | \"image\"\n     | \"link\"\n     | \"list\"\n     | \"list_item\"\n     | \"paragraph\"\n     | \"space\"\n     | \"strong\"\n     | \"table\"\n     | \"text\",\n     ElementHandler<T>\n   >\n >;\n\n\n export interface NotesOptions {\n \tenabled: boolean;\n }\n\n export interface PresentationOptions<N = NotesOptions> {\n \tnotesOptions: N | boolean;\n }\n\n export type ConfigurablePresentationOptions = Partial<PresentationOptions<Partial<NotesOptions>>>;\n\n export interface MutableSectionIndex {\n   index: number;\n }\n\nexport type MutableIndexSetter = Dispatch<SetStateAction<MutableSectionIndex>>;\n"]}